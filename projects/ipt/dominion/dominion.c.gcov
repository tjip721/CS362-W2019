        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:125
        -:    0:Programs:23
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int stewardFxn(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3 ); 
        -:    9:int outpostFxn(struct gameState *state, int currentPlayer, int handPos); 
        -:   10:int salvagerFxn(struct gameState *state, int currentPlayer, int choice1, int handPos);
        -:   11:int adventurerFxn(struct gameState *state, int currentPlayer); 
        -:   12:int smithyFxn(int handPos, int currentPlayer, struct gameState *state); 
        -:   13:
     1410:   14:int compare(const void* a, const void* b) {
     1410:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
     1410:   17:  if (*(int*)a < *(int*)b)
      376:   18:    return -1;
     1034:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
       57:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
       57:   50:  SelectStream(1);
       57:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
       57:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
       57:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
      587:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
     5910:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
     5380:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
       10:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
       47:   79:  if (numPlayers == 2)
        -:   80:    {
       47:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    #####:   83:  else if (numPlayers == 3)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
       47:   93:  if (numPlayers == 2)
        -:   94:    {
       47:   95:      state->supplyCount[estate] = 8;
       47:   96:      state->supplyCount[duchy] = 8;
       47:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
       47:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       47:  108:  state->supplyCount[silver] = 40;
       47:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
      987:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
     7755:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
     7285:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
      470:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
      188:  121:		  if (numPlayers == 2){ 
       94:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
      376:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
      470:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
     6815:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
      141:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
       94:  146:      state->deckCount[i] = 0;
      376:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
      282:  149:	  state->deck[i][j] = estate;
      282:  150:	  state->deckCount[i]++;
        -:  151:	}
      752:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
      658:  154:	  state->deck[i][j] = copper;
      658:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
      141:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
       94:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
      141:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
       94:  172:      state->handCount[i] = 0;
       94:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
     1316:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
     1269:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
       47:  188:  state->outpostPlayed = 0;
       47:  189:  state->phase = 0;
       47:  190:  state->numActions = 1;
       47:  191:  state->numBuys = 1;
       47:  192:  state->playedCardCount = 0;
       47:  193:  state->whoseTurn = 0;
       47:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      282:  198:  for (it = 0; it < 5; it++){
      235:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
       47:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
       47:  204:  return 0;
        -:  205:}
        -:  206:
       96:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
       96:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
       96:  215:  if (state->deckCount[player] < 1)
        2:  216:    return -1;
       94:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
     1128:  220:  while (state->deckCount[player] > 0) {
      940:  221:    card = floor(Random() * state->deckCount[player]);
      940:  222:    newDeck[newDeckPos] = state->deck[player][card];
      940:  223:    newDeckPos++;
     3149:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
     2209:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
      940:  227:    state->deckCount[player]--;
        -:  228:  }
     1034:  229:  for (i = 0; i < newDeckPos; i++) {
      940:  230:    state->deck[player][i] = newDeck[i];
      940:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
       94:  234:  return 0;
        -:  235:}
        -:  236:
       57:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
       57:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
       57:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
       57:  249:  if ( state->numActions < 1 )
        -:  250:    {
        8:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
       49:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
       49:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
       49:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
       49:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
       49:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
       49:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
      952:  317:int numHandCards(struct gameState *state) {
      952:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    34117:  321:int handCard(int handPos, struct gameState *state) {
    34117:  322:  int currentPlayer = whoseTurn(state);
    34117:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
  1836000:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
  1836000:  332:  int count = 0;
        -:  333:
414936000:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
413100000:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
414936000:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
413100000:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
414936000:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
413100000:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
  1836000:  349:  return count;
        -:  350:}
        -:  351:
    35130:  352:int whoseTurn(struct gameState *state) {
    35130:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
       12:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
       12:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
       60:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       48:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       48:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
       12:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
       12:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
       12:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
       12:  376:  state->outpostPlayed = 0;
       12:  377:  state->phase = 0;
       12:  378:  state->numActions = 1;
       12:  379:  state->coins = 0;
       12:  380:  state->numBuys = 1;
       12:  381:  state->playedCardCount = 0;
       12:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
       72:  386:  for (k = 0; k < 5; k++){
       60:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
       12:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
       12:  393:  return 0;
        -:  394:}
        -:  395:
    62152:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    62152:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
     6443:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    55709:  407:  j = 0;
  1448434:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
  1392725:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
   143208:  412:	  j++;
        -:  413:	}
        -:  414:    }
    55709:  415:  if ( j >= 3)
        -:  416:    {
    34408:  417:      return 1;
        -:  418:    }
        -:  419:
    21301:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
      437:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
      437:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
        2:  539:    for (i = 0; i < state->discardCount[player];i++){
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        2:  544:    state->deckCount[player] = state->discardCount[player];
        2:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        2:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        2:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        2:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        2:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        2:  565:    if (deckCounter == 0)
        2:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
      435:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
      435:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
      435:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      435:  582:    state->deckCount[player]--;
      435:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
      435:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
       49:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
       49:  659:  int currentPlayer = whoseTurn(state);
       49:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
       49:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
       49:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
       49:  666:  int z = 0;// this is the counter for the temp hand
       49:  667:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
       49:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
       18:  676:	return adventurerFxn(state, currentPlayer ); 
        -:  677:/*
        -:  678:      while(drawntreasure<2){
        -:  679:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  680:	  shuffle(currentPlayer, state);
        -:  681:	}
        -:  682:	drawCard(currentPlayer, state);
        -:  683:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  684:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  685:	  drawntreasure++;
        -:  686:	else{
        -:  687:	  temphand[z]=cardDrawn;
        -:  688:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  689:	  z++;
        -:  690:	}
        -:  691:      }
        -:  692:      while(z-1>=0){
        -:  693:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  694:	z=z-1;
        -:  695:      }
        -:  696:      return 0;
        -:  697:*/			
        -:  698:    case council_room:
        -:  699:      //+4 Cards
    #####:  700:      for (i = 0; i < 4; i++)
        -:  701:	{
    #####:  702:	  drawCard(currentPlayer, state);
        -:  703:	}
        -:  704:			
        -:  705:      //+1 Buy
    #####:  706:      state->numBuys++;
        -:  707:			
        -:  708:      //Each other player draws a card
    #####:  709:      for (i = 0; i < state->numPlayers; i++)
        -:  710:	{
    #####:  711:	  if ( i != currentPlayer )
        -:  712:	    {
    #####:  713:	      drawCard(i, state);
        -:  714:	    }
        -:  715:	}
        -:  716:			
        -:  717:      //put played card in played card pile
    #####:  718:      discardCard(handPos, currentPlayer, state, 0);
        -:  719:			
    #####:  720:      return 0;
        -:  721:			
        -:  722:    case feast:
        -:  723:      //gain card with cost up to 5
        -:  724:      //Backup hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  726:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  727:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  728:      }
        -:  729:      //Backup hand
        -:  730:
        -:  731:      //Update Coins for Buy
    #####:  732:      updateCoins(currentPlayer, state, 5);
    #####:  733:      x = 1;//Condition to loop on
    #####:  734:      while( x == 1) {//Buy one card
    #####:  735:	if (supplyCount(choice1, state) <= 0){
        -:  736:	  if (DEBUG)
        -:  737:	    printf("None of that card left, sorry!\n");
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  741:	  }
        -:  742:	}
    #####:  743:	else if (state->coins < getCost(choice1)){
    #####:  744:	  printf("That card is too expensive!\n");
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  748:	  }
        -:  749:	}
        -:  750:	else{
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
    #####:  756:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  757:	  x = 0;//No more buying cards
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:	  }
        -:  762:
        -:  763:	}
        -:  764:      }     
        -:  765:
        -:  766:      //Reset Hand
    #####:  767:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  768:	state->hand[currentPlayer][i] = temphand[i];
    #####:  769:	temphand[i] = -1;
        -:  770:      }
        -:  771:      //Reset Hand
        -:  772:      			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case gardens:
    #####:  776:      return -1;
        -:  777:			
        -:  778:    case mine:
    #####:  779:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  780:
    #####:  781:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  782:	{
    #####:  783:	  return -1;
        -:  784:	}
        -:  785:		
    #####:  786:      if (choice2 > treasure_map || choice2 < curse)
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:
    #####:  791:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      gainCard(choice2, state, 2, currentPlayer);
        -:  797:
        -:  798:      //discard card from hand
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:      //discard trashed card
    #####:  802:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  803:	{
    #####:  804:	  if (state->hand[currentPlayer][i] == j)
        -:  805:	    {
    #####:  806:	      discardCard(i, currentPlayer, state, 0);			
    #####:  807:	      break;
        -:  808:	    }
        -:  809:	}
        -:  810:			
    #####:  811:      return 0;
        -:  812:			
        -:  813:    case remodel:
    #####:  814:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  815:
    #####:  816:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  817:	{
    #####:  818:	  return -1;
        -:  819:	}
        -:  820:
    #####:  821:      gainCard(choice2, state, 0, currentPlayer);
        -:  822:
        -:  823:      //discard card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
        -:  825:
        -:  826:      //discard trashed card
    #####:  827:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  828:	{
    #####:  829:	  if (state->hand[currentPlayer][i] == j)
        -:  830:	    {
    #####:  831:	      discardCard(i, currentPlayer, state, 0);			
    #####:  832:	      break;
        -:  833:	    }
        -:  834:	}
        -:  835:
        -:  836:
    #####:  837:      return 0;
        -:  838:		
        -:  839:    case smithy:
       17:  840:	return smithyFxn(handPos, currentPlayer, state);
        -:  841:/*     //+3 Cards
        -:  842:      for (i = 0; i < 3; i++)
        -:  843:	{
        -:  844:	  drawCard(currentPlayer, state);
        -:  845:	}
        -:  846:			
        -:  847:      //discard card from hand
        -:  848:      discardCard(handPos, currentPlayer, state, 0);
        -:  849:      return 0;
        -:  850:*/		
        -:  851:    case village:
        -:  852:      //+1 Card
        2:  853:      drawCard(currentPlayer, state);
        -:  854:			
        -:  855:      //+2 Actions
        2:  856:      state->numActions = state->numActions + 2;
        -:  857:			
        -:  858:      //discard played card from hand
        2:  859:      discardCard(handPos, currentPlayer, state, 0);
        2:  860:      return 0;
        -:  861:		
        -:  862:    case baron:
    #####:  863:      state->numBuys++;//Increase buys by 1!
    #####:  864:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  865:	int p = 0;//Iterator for hand!
    #####:  866:	int card_not_discarded = 1;//Flag for discard set!
    #####:  867:	while(card_not_discarded){
    #####:  868:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  869:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  870:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  871:	    state->discardCount[currentPlayer]++;
    #####:  872:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  873:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  874:	    }
    #####:  875:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  876:	    state->handCount[currentPlayer]--;
    #####:  877:	    card_not_discarded = 0;//Exit the loop
        -:  878:	  }
    #####:  879:	  else if (p > state->handCount[currentPlayer]){
        -:  880:	    if(DEBUG) {
        -:  881:	      printf("No estate cards in your hand, invalid choice\n");
        -:  882:	      printf("Must gain an estate if there are any\n");
        -:  883:	    }
    #####:  884:	    if (supplyCount(estate, state) > 0){
    #####:  885:	      gainCard(estate, state, 0, currentPlayer);
    #####:  886:	      state->supplyCount[estate]--;//Decrement estates
    #####:  887:	      if (supplyCount(estate, state) == 0){
    #####:  888:		isGameOver(state);
        -:  889:	      }
        -:  890:	    }
    #####:  891:	    card_not_discarded = 0;//Exit the loop
        -:  892:	  }
        -:  893:			    
        -:  894:	  else{
    #####:  895:	    p++;//Next card
        -:  896:	  }
        -:  897:	}
        -:  898:      }
        -:  899:			    
        -:  900:      else{
    #####:  901:	if (supplyCount(estate, state) > 0){
    #####:  902:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  903:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  904:	  if (supplyCount(estate, state) == 0){
    #####:  905:	    isGameOver(state);
        -:  906:	  }
        -:  907:	}
        -:  908:      }
        -:  909:	    
        -:  910:      
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case great_hall:
        -:  914:      //+1 Card
    #####:  915:      drawCard(currentPlayer, state);
        -:  916:			
        -:  917:      //+1 Actions
    #####:  918:      state->numActions++;
        -:  919:			
        -:  920:      //discard card from hand
    #####:  921:      discardCard(handPos, currentPlayer, state, 0);
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case minion:
        -:  925:      //+1 action
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
        -:  930:			
    #####:  931:      if (choice1)		//+2 coins
        -:  932:	{
    #####:  933:	  state->coins = state->coins + 2;
        -:  934:	}
        -:  935:			
    #####:  936:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  937:	{
        -:  938:	  //discard hand
    #####:  939:	  while(numHandCards(state) > 0)
        -:  940:	    {
    #####:  941:	      discardCard(handPos, currentPlayer, state, 0);
        -:  942:	    }
        -:  943:				
        -:  944:	  //draw 4
    #####:  945:	  for (i = 0; i < 4; i++)
        -:  946:	    {
    #####:  947:	      drawCard(currentPlayer, state);
        -:  948:	    }
        -:  949:				
        -:  950:	  //other players discard hand and redraw if hand size > 4
    #####:  951:	  for (i = 0; i < state->numPlayers; i++)
        -:  952:	    {
    #####:  953:	      if (i != currentPlayer)
        -:  954:		{
    #####:  955:		  if ( state->handCount[i] > 4 )
        -:  956:		    {
        -:  957:		      //discard hand
    #####:  958:		      while( state->handCount[i] > 0 )
        -:  959:			{
    #####:  960:			  discardCard(handPos, i, state, 0);
        -:  961:			}
        -:  962:							
        -:  963:		      //draw 4
    #####:  964:		      for (j = 0; j < 4; j++)
        -:  965:			{
    #####:  966:			  drawCard(i, state);
        -:  967:			}
        -:  968:		    }
        -:  969:		}
        -:  970:	    }
        -:  971:				
        -:  972:	}
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case steward:
    #####:  976:	return stewardFxn(state, currentPlayer, handPos, choice1, choice2, choice3 ); 
        -:  977:/*
        -:  978:      if (choice1 == 1)
        -:  979:	{
        -:  980:	  //+2 cards
        -:  981:	  drawCard(currentPlayer, state);
        -:  982:	  drawCard(currentPlayer, state);
        -:  983:	}
        -:  984:      else if (choice1 == 2)
        -:  985:	{
        -:  986:	  //+2 coins
        -:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:      else
        -:  990:	{
        -:  991:	  //trash 2 cards in hand
        -:  992:	  discardCard(choice2, currentPlayer, state, 1);
        -:  993:	  discardCard(choice3, currentPlayer, state, 1);
        -:  994:	}
        -:  995:			
        -:  996:      //discard card from hand
        -:  997:      discardCard(handPos, currentPlayer, state, 0);
        -:  998:      return 0;
        -:  999:*/		
        -: 1000:    case tribute:
    #####: 1001:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1002:	if (state->deckCount[nextPlayer] > 0){
    #####: 1003:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	  state->deckCount[nextPlayer]--;
        -: 1005:	}
    #####: 1006:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1007:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1008:	  state->discardCount[nextPlayer]--;
        -: 1009:	}
        -: 1010:	else{
        -: 1011:	  //No Card to Reveal
        -: 1012:	  if (DEBUG){
        -: 1013:	    printf("No cards to reveal\n");
        -: 1014:	  }
        -: 1015:	}
        -: 1016:      }
        -: 1017:	    
        -: 1018:      else{
    #####: 1019:	if (state->deckCount[nextPlayer] == 0){
    #####: 1020:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1021:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1022:	    state->deckCount[nextPlayer]++;
    #####: 1023:	    state->discard[nextPlayer][i] = -1;
    #####: 1024:	    state->discardCount[nextPlayer]--;
        -: 1025:	  }
        -: 1026:			    
    #####: 1027:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1028:	} 
    #####: 1029:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
    #####: 1032:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1034:	state->deckCount[nextPlayer]--;
        -: 1035:      }    
        -: 1036:		       
    #####: 1037:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1038:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1039:	state->playedCardCount++;
    #####: 1040:	tributeRevealedCards[1] = -1;
        -: 1041:      }
        -: 1042:
    #####: 1043:      for (i = 0; i <= 2; i ++){
    #####: 1044:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1045:	  state->coins += 2;
        -: 1046:	}
        -: 1047:		    
    #####: 1048:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1049:	  drawCard(currentPlayer, state);
    #####: 1050:	  drawCard(currentPlayer, state);
        -: 1051:	}
        -: 1052:	else{//Action Card
    #####: 1053:	  state->numActions = state->numActions + 2;
        -: 1054:	}
        -: 1055:      }
        -: 1056:	    
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case ambassador:
    #####: 1060:      j = 0;		//used to check if player has enough cards to discard
        -: 1061:
    #####: 1062:      if (choice2 > 2 || choice2 < 0)
        -: 1063:	{
    #####: 1064:	  return -1;				
        -: 1065:	}
        -: 1066:
    #####: 1067:      if (choice1 == handPos)
        -: 1068:	{
    #####: 1069:	  return -1;
        -: 1070:	}
        -: 1071:
    #####: 1072:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1073:	{
    #####: 1074:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1075:	    {
    #####: 1076:	      j++;
        -: 1077:	    }
        -: 1078:	}
    #####: 1079:      if (j < choice2)
        -: 1080:	{
    #####: 1081:	  return -1;				
        -: 1082:	}
        -: 1083:
        -: 1084:      if (DEBUG) 
        -: 1085:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1086:
        -: 1087:      //increase supply count for choosen card by amount being discarded
    #####: 1088:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1089:			
        -: 1090:      //each other player gains a copy of revealed card
    #####: 1091:      for (i = 0; i < state->numPlayers; i++)
        -: 1092:	{
    #####: 1093:	  if (i != currentPlayer)
        -: 1094:	    {
    #####: 1095:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1096:	    }
        -: 1097:	}
        -: 1098:
        -: 1099:      //discard played card from hand
    #####: 1100:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1101:
        -: 1102:      //trash copies of cards returned to supply
    #####: 1103:      for (j = 0; j < choice2; j++)
        -: 1104:	{
    #####: 1105:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1106:	    {
    #####: 1107:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1108:		{
    #####: 1109:		  discardCard(i, currentPlayer, state, 1);
    #####: 1110:		  break;
        -: 1111:		}
        -: 1112:	    }
        -: 1113:	}			
        -: 1114:
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case cutpurse:
        -: 1118:
    #####: 1119:      updateCoins(currentPlayer, state, 2);
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
        -: 1123:	    {
    #####: 1124:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1125:		{
    #####: 1126:		  if (state->hand[i][j] == copper)
        -: 1127:		    {
    #####: 1128:		      discardCard(j, i, state, 0);
    #####: 1129:		      break;
        -: 1130:		    }
    #####: 1131:		  if (j == state->handCount[i])
        -: 1132:		    {
    #####: 1133:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1134:			{
        -: 1135:			  if (DEBUG)
        -: 1136:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1137:			}	
    #####: 1138:		      break;
        -: 1139:		    }		
        -: 1140:		}
        -: 1141:					
        -: 1142:	    }
        -: 1143:				
        -: 1144:	}				
        -: 1145:
        -: 1146:      //discard played card from hand
    #####: 1147:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1148:
    #####: 1149:      return 0;
        -: 1150:
        -: 1151:		
        -: 1152:    case embargo: 
        -: 1153:      //+2 Coins
    #####: 1154:      state->coins = state->coins + 2;
        -: 1155:			
        -: 1156:      //see if selected pile is in play
    #####: 1157:      if ( state->supplyCount[choice1] == -1 )
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //add embargo token to selected supply pile
    #####: 1163:      state->embargoTokens[choice1]++;
        -: 1164:			
        -: 1165:      //trash card
    #####: 1166:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case outpost:
       12: 1170:	return outpostFxn(state, currentPlayer, handPos);
        -: 1171:/*      //set outpost flag
        -: 1172:      state->outpostPlayed++;
        -: 1173:			
        -: 1174:      //discard card
        -: 1175:      discardCard(handPos, currentPlayer, state, 0);
        -: 1176:      return 0;
        -: 1177:*/		
        -: 1178:    case salvager:
    #####: 1179:	return salvagerFxn(state, currentPlayer, choice1, handPos); 
        -: 1180:/*
        -: 1181:      //+1 buy
        -: 1182:      state->numBuys++;
        -: 1183:			
        -: 1184:      if (choice1)
        -: 1185:	{
        -: 1186:	  //gain coins equal to trashed card
        -: 1187:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1188:	  //trash card
        -: 1189:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1190:	}
        -: 1191:			
        -: 1192:      //discard card
        -: 1193:      discardCard(handPos, currentPlayer, state, 0);
        -: 1194:      return 0;
        -: 1195:*/		
        -: 1196:    case sea_hag:
    #####: 1197:      for (i = 0; i < state->numPlayers; i++){
    #####: 1198:	if (i != currentPlayer){
    #####: 1199:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1200:	  state->discardCount[i]++;
    #####: 1201:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1202:	}
        -: 1203:      }
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case treasure_map:
        -: 1207:      //search hand for another treasure_map
    #####: 1208:      index = -1;
    #####: 1209:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1210:	{
    #####: 1211:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1212:	    {
    #####: 1213:	      index = i;
    #####: 1214:	      break;
        -: 1215:	    }
        -: 1216:	}
    #####: 1217:      if (index > -1)
        -: 1218:	{
        -: 1219:	  //trash both treasure cards
    #####: 1220:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1221:	  discardCard(index, currentPlayer, state, 1);
        -: 1222:
        -: 1223:	  //gain 4 Gold cards
    #####: 1224:	  for (i = 0; i < 4; i++)
        -: 1225:	    {
    #####: 1226:	      gainCard(gold, state, 1, currentPlayer);
        -: 1227:	    }
        -: 1228:				
        -: 1229:	  //return success
    #####: 1230:	  return 1;
        -: 1231:	}
        -: 1232:			
        -: 1233:      //no second treasure_map found in hand
    #####: 1234:      return -1;
        -: 1235:    }
        -: 1236:	
    #####: 1237:  return -1;
        -: 1238:}
        -: 1239:
       31: 1240:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1241:{
        -: 1242:	
        -: 1243:  //if card is not trashed, added to Played pile 
       31: 1244:  if (trashFlag < 1)
        -: 1245:    {
        -: 1246:      //add card to played pile
       19: 1247:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       19: 1248:      state->playedCardCount++;
        -: 1249:    }
        -: 1250:	
        -: 1251:  //set played card to -1
       31: 1252:  state->hand[currentPlayer][handPos] = -1;
        -: 1253:	
        -: 1254:  //remove card from player's hand
       31: 1255:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1256:    {
        -: 1257:      //reduce number of cards in hand
    #####: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
       31: 1260:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
    #####: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        -: 1265:  else 	
        -: 1266:    {
        -: 1267:      //replace discarded card with last card in hand
       31: 1268:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1269:      //set last card to -1
       31: 1270:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1271:      //reduce number of cards in hand
       31: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        -: 1274:	
       31: 1275:  return 0;
        -: 1276:}
        -: 1277:
    #####: 1278:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1279:{
        -: 1280:  //Note: supplyPos is enum of choosen card
        -: 1281:	
        -: 1282:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1283:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1284:    {
    #####: 1285:      return -1;
        -: 1286:    }
        -: 1287:	
        -: 1288:  //added card for [whoseTurn] current player:
        -: 1289:  // toFlag = 0 : add to discard
        -: 1290:  // toFlag = 1 : add to deck
        -: 1291:  // toFlag = 2 : add to hand
        -: 1292:
    #####: 1293:  if (toFlag == 1)
        -: 1294:    {
    #####: 1295:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1296:      state->deckCount[player]++;
        -: 1297:    }
    #####: 1298:  else if (toFlag == 2)
        -: 1299:    {
    #####: 1300:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1301:      state->handCount[player]++;
        -: 1302:    }
        -: 1303:  else
        -: 1304:    {
    #####: 1305:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1306:      state->discardCount[player]++;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //decrease number in supply pile
    #####: 1310:  state->supplyCount[supplyPos]--;
        -: 1311:	 
    #####: 1312:  return 0;
        -: 1313:}
        -: 1314:
      108: 1315:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1316:{
        -: 1317:  int i;
        -: 1318:	
        -: 1319:  //reset coin count
      108: 1320:  state->coins = 0;
        -: 1321:
        -: 1322:  //add coins for each Treasure card in player's hand
      713: 1323:  for (i = 0; i < state->handCount[player]; i++)
        -: 1324:    {
      605: 1325:      if (state->hand[player][i] == copper)
        -: 1326:	{
      529: 1327:	  state->coins += 1;
        -: 1328:	}
       76: 1329:      else if (state->hand[player][i] == silver)
        -: 1330:	{
    #####: 1331:	  state->coins += 2;
        -: 1332:	}
       76: 1333:      else if (state->hand[player][i] == gold)
        -: 1334:	{
    #####: 1335:	  state->coins += 3;
        -: 1336:	}	
        -: 1337:    }	
        -: 1338:
        -: 1339:  //add bonus
      108: 1340:  state->coins += bonus;
        -: 1341:
      108: 1342:  return 0;
        -: 1343:}
        -: 1344:
       17: 1345:int smithyFxn(int handPos, int currentPlayer, struct gameState *state) {
        -: 1346:	//+3 Cards
       17: 1347:      int i=0; 
       85: 1348:      for (i = 0; i <= 3; i++) //Assignment 2 BUG, should be < 3; 
        -: 1349:	{
       68: 1350:	  drawCard(currentPlayer, state);
        -: 1351:	}
        -: 1352:			
        -: 1353:      //discard card from hand
       17: 1354:      discardCard(handPos, currentPlayer, state, 0);
       17: 1355:      return 0;
        -: 1356:}
        -: 1357:
       18: 1358:int adventurerFxn(struct gameState *state, int currentPlayer){
        -: 1359:  int temphand[MAX_HAND];// moved above the if statement
       18: 1360:  int drawntreasure=0;
       18: 1361:  int z = 0;// this is the counter for the temp hand
        -: 1362:  int cardDrawn;
        -: 1363: 
      108: 1364:     while(drawntreasure<2){
       72: 1365:	if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck //Assignment 2 BUG, should be <1
    #####: 1366:	  shuffle(currentPlayer, state);
        -: 1367:	}
       72: 1368:	drawCard(currentPlayer, state);
       72: 1369:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       72: 1370:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       36: 1371:	  drawntreasure++;
        -: 1372:	else{
       36: 1373:	  temphand[z]=cardDrawn;
       36: 1374:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       36: 1375:	  z++;
        -: 1376:	}
        -: 1377:      }
       72: 1378:      while(z-1>=0){
       36: 1379:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       36: 1380:	z=z-1;
        -: 1381:      }
       18: 1382:      return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
    #####: 1386:int salvagerFxn(struct gameState *state, int currentPlayer, int choice1, int handPos){
        -: 1387:  //+1 buy
    #####: 1388:      state->numBuys++;
        -: 1389:			
    #####: 1390:      if (choice1)
        -: 1391:	{
        -: 1392:	  //gain coins equal to trashed card
    #####: 1393:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1394:	  //trash card
    #####: 1395:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1396:	}
        -: 1397:			
        -: 1398:      //discard card
    #####: 1399:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1400:      return 0;
        -: 1401:}
        -: 1402:	
       12: 1403:int outpostFxn(struct gameState *state, int currentPlayer, int handPos){
        -: 1404:      //set outpost flag
       12: 1405:      state->outpostPlayed++;
        -: 1406:			
        -: 1407:      //discard card
       12: 1408:      discardCard(handPos, currentPlayer, state, 1); //Assignment 2 BUG, trashflag = 0
       12: 1409:      return 0;
        -: 1410:}
        -: 1411:			
    #####: 1412:int stewardFxn(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3 ){
    #####: 1413:      if (choice1 == 2) //Assignment 2 BUG, choice1 = 1
        -: 1414:	{
        -: 1415:	  //+2 cards
    #####: 1416:	  drawCard(currentPlayer, state);
    #####: 1417:	  drawCard(currentPlayer, state);
        -: 1418:	}
    #####: 1419:      else if (choice1 == 1)//Assignment 2 BUG, choice1 = 2
        -: 1420:	{
        -: 1421:	  //+2 coins
    #####: 1422:	  state->coins = state->coins + 2;
        -: 1423:	}
        -: 1424:      else
        -: 1425:	{
        -: 1426:	  //trash 2 cards in hand
    #####: 1427:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1428:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1429:	}
        -: 1430:			
        -: 1431:      //discard card from hand
    #####: 1432:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1433:      return 0;
        -: 1434:}	
        -: 1435:
        -: 1436:
        -: 1437://end of dominion.c
        -: 1438:
